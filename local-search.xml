<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>useImperativeHandle</title>
    <link href="/2023/06/21/useImperativeHandle/"/>
    <url>/2023/06/21/useImperativeHandle/</url>
    
    <content type="html"><![CDATA[<h3 id="useImperativeHandle-和-ref-转发"><a href="#useImperativeHandle-和-ref-转发" class="headerlink" title="useImperativeHandle 和 ref 转发"></a>useImperativeHandle 和 ref 转发</h3><p><strong>useImperativeHandle 可以让你在使用 ref 时自定义暴露给父组件的实例值，应当与 forwardRef 一起使用，实现 ref 转发</strong></p><p><strong>我们获取类组件实例后，可以直接调用实例上的方法！</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useEffect, useRef &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Child</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  submit = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;调用了子组件的submit方法！&quot;</span>);<br>  &#125;;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>           ...        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br>  &#125;<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Demo</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> box = <span class="hljs-title function_">useRef</span>(<span class="hljs-literal">null</span>);<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(box.<span class="hljs-property">current</span>); <span class="hljs-comment">//子组件的实例</span><br>    box.<span class="hljs-property">current</span>.<span class="hljs-title function_">submit</span>();<br>  &#125;, []);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">             <span class="hljs-tag">&lt;<span class="hljs-name">Child</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;box&#125;</span> /&gt;</span>   </span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>但是直接把 ref 赋值给函数组件，是不被允许的！</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> <span class="hljs-title class_">Child</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>       ...    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br>&#125;;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Demo</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> box = <span class="hljs-title function_">useRef</span>(<span class="hljs-literal">null</span>);<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(box.<span class="hljs-property">current</span>); <span class="hljs-comment">//null // Warning: Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?</span><br>  &#125;, []);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">             <span class="hljs-tag">&lt;<span class="hljs-name">Child</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;box&#125;</span> /&gt;</span>   </span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>此时我们可以基于 forwardRef 和 useImperativeHandle , 就可以实现父组件调用子组件中的方法！</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123;<br>  useEffect,<br>  useRef,<br>  useImperativeHandle,<br>  forwardRef,<br>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Child</span> = <span class="hljs-title function_">forwardRef</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">props, ref</span>) &#123;<br>  <span class="hljs-title function_">useImperativeHandle</span>(ref, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">submit</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;调用了子组件的submit方法！&quot;</span>);<br>      &#125;,<br>    &#125;;<br>  &#125;);<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>       ...    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br>&#125;);<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Demo</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> box = <span class="hljs-title function_">useRef</span>(<span class="hljs-literal">null</span>);<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(box.<span class="hljs-property">current</span>);<br>    box.<span class="hljs-property">current</span>.<span class="hljs-title function_">submit</span>();<br>  &#125;, []);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">             <span class="hljs-tag">&lt;<span class="hljs-name">Child</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;box&#125;</span> /&gt;</span>   </span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>react</tag>
      
      <tag>useImperativeHandle</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>useRef深层剖析</title>
    <link href="/2023/06/19/useRef/"/>
    <url>/2023/06/19/useRef/</url>
    
    <content type="html"><![CDATA[<h3 id="useRef"><a href="#useRef" class="headerlink" title="useRef"></a>useRef</h3><h4 id="ref-使用场景"><a href="#ref-使用场景" class="headerlink" title="ref 使用场景"></a>ref 使用场景</h4><p><strong>通常，当你的组件需要“跳出” React 并与外部 API 通信时，你会用到 ref —— 通常是不会影响组件外观的浏览器 API。以下是这些罕见情况中的几个：</strong></p><ul><li><strong>存储 <a href="https://developer.mozilla.org/docs/Web/API/setTimeout">timeout ID</a></strong></li><li><strong>存储和操作 <a href="https://developer.mozilla.org/docs/Web/API/Element">DOM 元素</a>，涉及非受控组件。赋值给标签，目的是获取 DOM 元素；赋值给类组件，目的是获取组件的实例；</strong></li><li><strong>存储不需要被用来计算 JSX 的其他对象。</strong></li></ul><p><strong>如果你的组件需要存储一些值，但不影响渲染逻辑，请选择 ref。</strong></p><h4 id="类组件的三种创建和使用方式"><a href="#类组件的三种创建和使用方式" class="headerlink" title="类组件的三种创建和使用方式"></a>类组件的三种创建和使用方式</h4><h5 id="方式一——字符串形式的-ref（过时了，未来版本可能移除，开发时不推荐使用，效率低）"><a href="#方式一——字符串形式的-ref（过时了，未来版本可能移除，开发时不推荐使用，效率低）" class="headerlink" title="方式一——字符串形式的 ref（过时了，未来版本可能移除，开发时不推荐使用，效率低）"></a>方式一——字符串形式的 ref（<strong>过时了，未来版本可能移除，开发时不推荐使用，效率低</strong>）</h5><p><strong>通过 <code>this.refs</code>访问</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">&lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">ref</span>=&quot;input1&quot;/&gt;<br></code></pre></td></tr></table></figure><h5 id="方式二——回调形式的-ref"><a href="#方式二——回调形式的-ref" class="headerlink" title="方式二——回调形式的 ref"></a>方式二——回调形式的 ref</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">React帮我们调用回调函数，并且将当前的DOM节点传入回调函数<br></code></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;input<br>  ref=&#123;<span class="hljs-function">(<span class="hljs-params">currentNode</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">input1</span> = currentNode;<br>  &#125;&#125;<br>/&gt;<br><span class="hljs-comment">// currentNode是当前所处的节点，也就是这个input</span><br></code></pre></td></tr></table></figure><p><strong>不能通过 <code>this.refs</code>访问，因为这些 ref 都成了实例属性</strong></p><p><strong>React 不会帮你执行未知属性的回调函数</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;input<br>  ref=&#123;<span class="hljs-function">(<span class="hljs-params">c</span>) =&gt;</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">input1</span> = c)&#125;<br>  ahh=&#123;<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>);<br>  &#125;&#125;<br>  type=<span class="hljs-string">&quot;text&quot;</span><br>  placeholder=<span class="hljs-string">&quot;点击按钮提示数据&quot;</span><br>/&gt;<br></code></pre></td></tr></table></figure><p><strong>如果 ref 回调函数是以**<strong>内联函数的形式定义的，在更新过程中它会被执行两次</strong>，第一次传入参数 null，第二次传入参数 DOM 元素。这是因为在每次渲染时创建一个新的实例，所以 React 清空旧的 ref 并设置新的。通过</strong>将 ref 的回调函数定义成 class 的绑定函数<strong>的方式可以避免上述问题，但是</strong>大多数情况下它是无效的（无关紧要）**</p><h5 id="方式三——createRef-创建-ref-容器（最推荐）"><a href="#方式三——createRef-创建-ref-容器（最推荐）" class="headerlink" title="方式三——createRef 创建 ref 容器（最推荐）"></a>方式三——createRef 创建 ref 容器（<strong>最推荐</strong>）</h5><p><em>React.createRef 调用后可以返回一个容器，该容器可以存储被 ref 所标识的节点,该容器是“专人专用”的，多个 ref 的值可以相互独立</em></p><p><strong>ref 是实例的属性，不能通过 this.refs 访问</strong></p><p><strong>this.myRef.current 是当前引用的 DOM，this.myRef.current.value 是当前 DOM 的值</strong></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">myRef</span> <span class="hljs-operator">=</span> React.createRef()<span class="hljs-comment">;</span><br>&lt;input ref<span class="hljs-operator">=</span>&#123;this.myRef&#125; /&gt;<br></code></pre></td></tr></table></figure><h4 id="hooks-组件通过-useRef-创建-ref-对象"><a href="#hooks-组件通过-useRef-创建-ref-对象" class="headerlink" title="hooks 组件通过 useRef 创建 ref 对象"></a>hooks 组件通过 useRef 创建 ref 对象</h4><p><strong>在函数组件中，可以基于</strong> <code>useRef</code>获取 DOM 元素！类似于类组件中的 ：</p><ul><li><strong>ref&#x3D;{x&#x3D;&gt;thix.box&#x3D;x}</strong></li><li><strong>React.createRef</strong></li></ul><p><strong>函数组件中创建 ref 对象的两种方法：</strong></p><ul><li><code>let box1 = useRef(null)</code></li><li><code>let box2 = React.createRef();</code></li></ul><p><strong>注意：</strong></p><p><strong>React.createRef 也是 ref 对象，在类组件和函数组件中都可以使用</strong></p><p><strong>useRef 只能在函数组件中使用，所有的 hooks 函数都只能在函数组件中使用，在类组件中使用会报错</strong></p><p><strong>ref 只能在 DOM 创建之后才能获取 DOM 元素，也就是说在 useLayoutEffect 阶段就可以使用</strong></p><h4 id="createRef-性能比-useRef-差——每次渲染创建新-ref-对象"><a href="#createRef-性能比-useRef-差——每次渲染创建新-ref-对象" class="headerlink" title="createRef 性能比 useRef 差——每次渲染创建新 ref 对象"></a>createRef 性能比 useRef 差——每次渲染创建新 ref 对象</h4><ul><li><strong>createRef 每次渲染都会返回一个新的引用</strong></li><li><strong>而 useRef 每次都会返回相同的引用</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useState, useEffect, useRef &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Button</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./Demo.less&#x27;</span>;<br><br><span class="hljs-keyword">let</span> prev1,<br>    prev2;<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Demo</span> = <span class="hljs-keyword">function</span> <span class="hljs-title function_">Demo</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> [num, setNum] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br><span class="hljs-comment">// 函数组件中创建ref对象的两种方法</span><br>    <span class="hljs-keyword">let</span> box1 = <span class="hljs-title function_">useRef</span>(<span class="hljs-literal">null</span>),<br>        box2 = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createRef</span>();<br>    <span class="hljs-keyword">if</span> (!prev1) &#123;<br>        <span class="hljs-comment">// 第一次DEMO执行，把第一次创建的REF对象赋值给变量</span><br>        prev1 = box1;<br>        prev2 = box2;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 第二次DEMO执行，我们验证一下，新创建的REF对象，和之前第一次创建的REF对象，是否一致？</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(prev1 === box1); <span class="hljs-comment">//true  useRef再每一次组件更新的时候（函数重新执行），再次执行useRef方法的时候，不会创建新的REF对象了，获取到的还是第一次创建的那个REF对象！！</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(prev2 === box2); <span class="hljs-comment">//false createRef在每一次组件更新的时候，都会创建一个全新的REF对象出来，比较浪费性能！！</span><br>        <span class="hljs-comment">// 总结：在类组件中，创建REF对象，我们基于 React.createRef 处理；但是在函数组件中，为了保证性能，我们应该使用专属的 useRef 处理！！</span><br>    &#125;<br><br>    <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(box1.<span class="hljs-property">current</span>);<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(box2.<span class="hljs-property">current</span>);<br>    &#125;);<br><br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;num&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;box1&#125;</span>&gt;</span>&#123;num&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;num&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;box2&#125;</span>&gt;</span>哈哈哈<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;small&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">                setNum(num + 1);</span><br><span class="language-xml">            &#125;&#125;&gt;</span><br><span class="language-xml">            新增</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>总结：在类组件中，创建 Ref 对象，基于 React.createRef 处理；在函数组件中为了保证性能使用 useRef</strong></p><h4 id="ref-的-DOM-用法总结【useRef】"><a href="#ref-的-DOM-用法总结【useRef】" class="headerlink" title="ref 的 DOM 用法总结【useRef】"></a>ref 的 DOM 用法总结【useRef】</h4><ul><li><strong>给元素标签设置 ref，目的：获取对应的 DOM 元素</strong></li><li><strong>给类组件设置 ref，目的：获取当前调用组件创建的实例（后续可以根据实例获取子组件中的相关信息）</strong><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-comment">// 基于ref获取子组件的实例，这样基于实例，可以调用子组件内部，挂载到实例上的东西</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Child</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>    state = &#123; x: <span class="hljs-number">1000</span> &#125;;<br>    render() &#123;<br>        <span class="hljs-keyword">return</span> &lt;div className=<span class="hljs-string">&quot;child-box&quot;</span>&gt;<br>            &#123;<span class="hljs-keyword">this</span>.state.x&#125;<br>        &lt;/div&gt;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><strong>给函数组件&#x2F;hooks 设置 ref，直接报错：Function components cannot be given refs. Attempts to access this ref wil fail，但是可以配合 React.forwardRef 实现 ref 的转发。目的：获取函数子组件内的某个 DOM 元素</strong><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 基于forwardRef实现ref转发，目的：获取子组件内部的某个元素</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Child</span> = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">forwardRef</span>(<span class="hljs-keyword">function</span> <span class="hljs-title function_">Child</span>(<span class="hljs-params">props, ref</span>) &#123;<br>    <span class="hljs-comment">// console.log(ref); //在DEMO中，调用Child的时候，传递的ref对象「x」</span><br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;child-box&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;ref&#125;</span>&gt;</span>哈哈哈<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br>&#125;);<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>react</category>
      
      <category>hooks</category>
      
    </categories>
    
    
    <tags>
      
      <tag>react</tag>
      
      <tag>useRef</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>useLayoutEffect深层剖析</title>
    <link href="/2023/06/17/useLayoutEffect/"/>
    <url>/2023/06/17/useLayoutEffect/</url>
    
    <content type="html"><![CDATA[<h2 id="useLayoutEffect"><a href="#useLayoutEffect" class="headerlink" title="useLayoutEffect"></a>useLayoutEffect</h2><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>useLayoutEffect 函数签名与 useEffect 相同，但它会在所有的 DOM 变更之后<strong>同步</strong>调用 effect。</p><p>可以使用它来读取 DOM 布局并同步触发重渲染。</p><p>在浏览器执行绘制之前，useLayoutEffect 内部的更新计划将被同步刷新。</p><p>尽可能使用标准的 useLayoutEffect 以避免阻塞视觉更新。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useState, useEffect, useLayoutEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Demo</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">let</span> [num, setNum] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br>  <span class="hljs-comment">// 再试试useLayoutEffect</span><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (num === <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-keyword">let</span> random = +<span class="hljs-title class_">String</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>()).<span class="hljs-title function_">substring</span>(<span class="hljs-number">2</span>);<br>      <span class="hljs-title function_">setNum</span>(random);<br>    &#125;<br>  &#125;, [num]);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">background:</span> &quot;<span class="hljs-attr">lightblue</span>&quot;,</span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">WebkitUserSelect:</span> &quot;<span class="hljs-attr">none</span>&quot;,</span></span><br><span class="hljs-tag"><span class="language-xml">      &#125;&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">        setNum(0);</span><br><span class="language-xml">      &#125;&#125;</span><br><span class="language-xml">    &gt;</span><br><span class="language-xml">      &#123;num&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="useEffect-和-useLayoutEffect-区别"><a href="#useEffect-和-useLayoutEffect-区别" class="headerlink" title="useEffect 和 useLayoutEffect 区别"></a>useEffect 和 useLayoutEffect 区别</h3><p><strong>useLayoutEffect 会阻塞浏览器渲染真实 DOM【真实 DOM 对象已经创建了】，优先执行 Effect 链表中的 callback；</strong></p><p><strong>useEffect 不会阻塞浏览器渲染真实 DOM，在渲染真实 DOM 的同时，去执行 Effect 链表中的 callback</strong></p><ul><li>它们里面的回调函数<strong>都是放在 effect 链表</strong>中的，但是 useLayoutEffect 设置的 callback 要<strong>优先</strong>于 useEffect 去执行</li><li>在两者设置的 callback 中，<strong>依然可以获取 DOM 元素</strong>「原因：真实 DOM 对象已经创建了，区别只是浏览器是否渲染」</li><li>如果在 callback 函数中又修改了状态值「视图又要更新」<ul><li>useEffect:浏览器肯定是把第一次的真实已经绘制了，再去渲染第二次真实 DOM【频繁切换有闪烁】</li><li>useLayoutEffect:浏览器是把两次真实 DOM 的渲染，<strong>合并在一起渲染</strong>的【频繁切换无闪烁】</li></ul></li></ul><h3 id="视图更新周期："><a href="#视图更新周期：" class="headerlink" title="视图更新周期："></a>视图更新周期：</h3><p><strong>第一步：基于 babel-preset-react-app 把 JSX 编译为 createElement 格式</strong></p><p><strong>第二步：执行 createElement(…)方法，创建出 virtualDOM</strong></p><p><strong>第三步：基于 root.render 方法把 virtualDOM 变为真实 DOM 对象「DOM-DIFF」</strong></p><pre><code class="hljs">**useLayoutEffect阻塞浏览器绘制：在整个视图渲染更新周期中，创建出真实DOM以后直接执行useLayoutEffect的effect链表中的方法。如果该方法有setXXX操作，那么会直接进入下一次更新周期中，而不会执行第四步。因此无论视图更新的过程执行了多少次，界面永远只看到了一次变化，即【频繁切换无闪烁】**</code></pre><p><strong>第四步：浏览器渲染和绘制真实 DOM 对象</strong></p><p><strong>useEffect 不阻塞浏览器绘制：在浏览器绘制完毕、第四步执行之后才会执行 effect 链表中的方法。如果该方法有 setXXX 操作，那么会直接进入下一次更新周期中。视图更新的过程执行了多少次，第四步就会执行多少次，浏览器就会渲染重绘多少次。由于浏览器绘制是需要一定时间的，因此对于速度较慢的设备，用户会看到多次重绘之间的“白屏”，即【频繁切换有闪烁】</strong></p><p><strong>从视图更新周期可以看出，useLayoutEffect 和 useEffect 都是可以获取真实 DOM 的时机</strong></p><h3 id="官方文档示例参考"><a href="#官方文档示例参考" class="headerlink" title="官方文档示例参考"></a>官方文档示例参考</h3><p><a href="https://react.docschina.org/reference/react/useLayoutEffect#usage">https://react.docschina.org/reference/react/useLayoutEffect#usage</a></p>]]></content>
    
    
    <categories>
      
      <category>react</category>
      
      <category>hooks</category>
      
    </categories>
    
    
    <tags>
      
      <tag>react</tag>
      
      <tag>useLayoutEffect</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>react hooks简介</title>
    <link href="/2023/06/01/Hooks%E7%BB%84%E4%BB%B6%E7%AE%80%E4%BB%8B/"/>
    <url>/2023/06/01/Hooks%E7%BB%84%E4%BB%B6%E7%AE%80%E4%BB%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="React-组件回顾"><a href="#React-组件回顾" class="headerlink" title="React 组件回顾"></a>React 组件回顾</h2><h3 id="函数组件特点"><a href="#函数组件特点" class="headerlink" title="函数组件特点"></a>函数组件特点</h3><ul><li>不具备“状态、ref、周期函数”等内容，第一次渲染完毕后，无法基于组件内部的操作来控制其更新，因此称之为静态组件！</li><li>但是具备属性及插槽，父组件可以控制其重新渲染！</li><li>渲染流程简单，渲染速度较快！</li><li>基于 FP（函数式编程）思想设计，提供更细粒度的逻辑组织和复用！</li><li><strong>纯函数组件，无法改状态</strong></li></ul><h3 id="类组件特点"><a href="#类组件特点" class="headerlink" title="类组件特点"></a>类组件特点</h3><ul><li>具备“状态、ref、周期函数、属性、插槽”等内容，可以灵活的控制组件更新，基于钩子函数也可灵活掌控不同阶段处理不同的事情！</li><li>渲染流程繁琐，渲染速度相对较慢！</li><li>基于 OOP（面向对象编程）思想设计，更方便实现继承等！</li></ul><h3 id="React-Hooks-组件"><a href="#React-Hooks-组件" class="headerlink" title="React Hooks 组件"></a>React Hooks 组件</h3><p>就是基于 React 中新提供的 Hook 函数，可以 <code>让函数组件动态化</code>!</p><h2 id="Hook-函数概览"><a href="#Hook-函数概览" class="headerlink" title="Hook 函数概览"></a>Hook 函数概览</h2><p>Hook 是 React 16.8 的新增特性！并且只能运用到函数组件中！<br><a href="https://zh-hans.reactjs.org/docs/hooks-reference.html">https://zh-hans.reactjs.org/docs/hooks-reference.html</a></p><ul><li>基础 Hook<ul><li><code>useState</code> 使用状态管理</li><li><code>useEffect</code> 使用周期函数</li><li><code>useContext</code> 使用上下文信息</li></ul></li><li>额外的 Hook<ul><li><code>useReducer</code> useState 的替代方案，借鉴 redux 处理思想，管理更复杂的状态和逻辑</li><li><code>useCallback</code> 构建缓存优化方案</li><li><code>useMemo</code> 构建缓存优化方案</li><li><code>useRef</code> 使用 ref 获取 DOM</li><li><code>useImperativeHandle</code> 配合 forwardRef（ref 转发）一起使用</li><li><code>useLayoutEffect</code> 与 useEffect 相同，但会在所有的 DOM 变更之后同步调用 effect</li><li>…</li></ul></li><li>自定义 Hook</li><li>……</li></ul>]]></content>
    
    
    <categories>
      
      <category>react</category>
      
      <category>hooks</category>
      
    </categories>
    
    
    <tags>
      
      <tag>react</tag>
      
      <tag>hooks</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
